<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323115">https://github.com/mdecp2024/hw-41323115</a> </p>
<p>個人網站:<a href="https://mde.tw/cp2024/content/index.html">https://mde.tw/cp2024/content/index.html</a> </p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<h3>w7</h3>
<p>影片連結:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/J3hfhmmBJvM" width="560"></iframe></p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w10</h3>
<h4>第一題</h4>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1IWJV754WA4" width="560"></iframe></p>
<h4>第二題</h4>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9xxtTE_MXy4" width="560"></iframe></p>
<h4>第三題</h4>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/SiQodbjNgFA" width="560"></iframe></p>
<p>以下方程式列印採用 <a href="https://www.mathjax.org/#gettingstarted">Mathjax Version 3 格式</a>.</p>
<p></p>
<script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<h4>set1 - Physics</h4>
<p><span style="background-color: #ccffcc;">Use python to solve the problem: A jet touches down at velocity 310 km/h. Find the constant acceleration required to stop the aircraft 1000 m down the runway.</span></p>
<p style="padding-left: 30px;">To solve this problem, we'll use the kinematic equations of motion under constant acceleration. The question asks for the constant acceleration required to stop the jet after a certain distance, which means we are looking for the deceleration.</p>
<p style="padding-left: 30px;">Step 1: Problem Breakdown</p>
<p style="padding-left: 30px;">We are given:<br/>- Initial velocity \( v_0 = 310 \, \text{km/h} \)<br/>- Final velocity \( v = 0 \, \text{m/s} \) (since the jet stops)<br/>- Distance \( d = 1000 \, \text{m} \)</p>
<p style="padding-left: 30px;">We are asked to find the constant acceleration \( a \) that brings the jet to a stop.</p>
<p style="padding-left: 30px;">Step 2: Kinematic Equation</p>
<p style="padding-left: 30px;">The appropriate kinematic equation for this problem, where the object is decelerating (i.e., stopping), is:</p>
<p style="padding-left: 30px;">\[<br/>v^2 = v_0^2 + 2ad<br/>\]</p>
<p style="padding-left: 30px;">Where:<br/>- \( v \) is the final velocity (which is 0 since the jet stops),<br/>- \( v_0 \) is the initial velocity,<br/>- \( a \) is the constant acceleration (which we need to solve for),<br/>- \( d \) is the distance traveled.</p>
<p style="padding-left: 30px;">Step 3: Solving for Acceleration \( a \)</p>
<p style="padding-left: 30px;">Rearranging the equation to solve for \( a \):</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{v^2 - v_0^2}{2d}<br/>\]</p>
<p style="padding-left: 30px;">Since \( v = 0 \), this simplifies to:</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{-v_0^2}{2d}<br/>\]</p>
<p style="padding-left: 30px;">Step 4: Converting Units</p>
<p style="padding-left: 30px;">The velocity \( v_0 = 310 \, \text{km/h} \) needs to be converted to meters per second (m/s) because the distance is in meters and we want the acceleration in meters per second squared (m/s²).</p>
<p style="padding-left: 30px;">\[<br/>v_0 = 310 \, \text{km/h} = \frac{310 \times 1000}{3600} \, \text{m/s} = 86.11 \, \text{m/s}<br/>\]</p>
<p style="padding-left: 30px;">Step 5: Substituting Known Values</p>
<p style="padding-left: 30px;">Now we can substitute the values into the equation:</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{-(86.11)^2}{2 \times 1000}<br/>\]</p>
<p style="padding-left: 30px;">Let's calculate this using Python.</p>
<p style="padding-left: 30px;">Python Code Implementation: <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/d9558707c7e1765c1e6885ddc6919e32265c6d23/problem-set1-1_py.txt">problem-set1-1.py</a></p>
<p style="padding-left: 30px;"></p>
<p style="padding-left: 30px;">Use function to solve this kind of problem. <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9567804babcc2fa9edc32403d76dcf2af4955bcf/problem-set1-2_py.txt">problem-set1-2.py</a></p>
<p style="padding-left: 30px;">Extend to be more general to solve all kind of these problems. <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9567804babcc2fa9edc32403d76dcf2af4955bcf/problem-set1-3_py.txt">problem-set1-3.py</a></p>
<h4>set2- Calculus</h4>
<p><span style="background-color: #ccffcc;">Under ideal conditions a certain bacteria population is known to double every three hours. Suppose that there are initially 100 bacteria. When will the population first reach 50,000 ?</span></p>
<p style="padding-left: 30px;">We are asked to determine when a bacteria population, starting at 100 bacteria, will first reach 50,000, given that the population doubles every 3 hours.</p>
<p style="padding-left: 30px;">Exponential Growth Equation:</p>
<p style="padding-left: 30px;">The population growth can be modeled by the exponential growth formula:</p>
<p style="padding-left: 30px;">\[<br/>P(t) = P_0 \times 2^{\frac{t}{T}}<br/>\]</p>
<p style="padding-left: 30px;">Where:<br/>- \( P(t) \) is the population at time \( t \),<br/>- \( P_0 \) is the initial population,<br/>- \( T \) is the doubling time (in hours),<br/>- \( t \) is the time elapsed (in hours).</p>
<p style="padding-left: 30px;">Given:<br/>- \( P_0 = 100 \) (initial population),<br/>- \( T = 3 \) hours (doubling time),<br/>- \( P(t) = 50,000 \) (target population).</p>
<p style="padding-left: 30px;">Step 1: Plugging in the known values</p>
<p style="padding-left: 30px;">We want to find the time \( t \) when the population reaches 50,000. Substituting the known values into the growth equation:</p>
<p style="padding-left: 30px;">\[<br/>50,000 = 100 \times 2^{\frac{t}{3}}<br/>\]</p>
<p style="padding-left: 30px;">Step 2: Simplifying the equation</p>
<p style="padding-left: 30px;">First, divide both sides by 100 to isolate the exponential term:</p>
<p style="padding-left: 30px;">\[<br/>500 = 2^{\frac{t}{3}}<br/>\]</p>
<p style="padding-left: 30px;">Step 3: Solving for \( t \)</p>
<p style="padding-left: 30px;">To solve for \( t \), take the logarithm (base 2) of both sides of the equation:</p>
<p style="padding-left: 30px;">\[<br/>\log_2(500) = \frac{t}{3}<br/>\]</p>
<p style="padding-left: 30px;">Now, multiply both sides by 3 to solve for \( t \):</p>
<p style="padding-left: 30px;">\[<br/>t = 3 \times \log_2(500)<br/>\]</p>
<p style="padding-left: 30px;">Step 4: Change of Base Formula</p>
<p style="padding-left: 30px;">To compute \( \log_2(500) \) in Python or any other programming language, we can use the change of base formula:</p>
<p style="padding-left: 30px;">\[<br/>\log_2(x) = \frac{\log_{10}(x)}{\log_{10}(2)}<br/>\]</p>
<p style="padding-left: 30px;">Thus, the equation for \( t \) becomes:</p>
<p style="padding-left: 30px;">\[<br/>t = 3 \times \frac{\log_{10}(500)}{\log_{10}(2)}<br/>\]</p>
<p style="padding-left: 30px;">Python Code to Calculate \( t \): <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/d9558707c7e1765c1e6885ddc6919e32265c6d23/problem-set2-1_py.txt">problem-set2-1.py</a></p>
<p></p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/czSVR9OiONE" width="560"></iframe></p>
<p></p>
<p><a href="https://gist.githubusercontent.com/41323115/44b208d44cef1d1dca903d33c9027ec2/raw/?scr6da755fa8dd3ed062d5d6a63f8e990ec407d367a/w11_hw">程式碼</a></p>
<p></p>
<h3>w12</h3>
<p>1. 請各組組員分別利用<span> </span><span>Brython 以及 Jupyter lab</span><span> </span>環境, 執行<a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> </span>notebook 目錄中的<span> </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> </span>筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人<span> </span><span>Gist</span><span> </span>後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/fo4LkDLHfiM" width="560"></iframe></p>
<p></p>
<p><a href="https://gist.githubusercontent.com/41323115/d8f62ff5f9e3cbe980841f1a3389de34/raw/?scre453fdbf574181c2eafcbf67b07187a21860151f/w12-1">程式碼</a></p>
<p></p>
<h3>w12_hw</h3>
<p>w12-1:</p>
<p><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/c0da6eea25d98854477a57ec3dacb13a/raw/de071746fa0043e7b19c4a91bf2de1be96d9d128/w12-1.py">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/c0da6eea25d98854477a57ec3dacb13a/raw/de071746fa0043e7b19c4a91bf2de1be96d9d128/w12-1.py">程式碼</a></p>
<p>使用了print和input的語法。</p>
<p>w12-2:</p>
<p><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/344e8d7eb1cdaa7b9a3831f9d4387e04/raw/ef4f05fa41034fd2f495cb0c918949d514285df0/w12-2.py">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/344e8d7eb1cdaa7b9a3831f9d4387e04/raw/ef4f05fa41034fd2f495cb0c918949d514285df0/w12-2.py">程式碼</a></p>
<p>使用了input語法</p>
<p>w12-3:</p>
<p><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/d849d2177cb48240695370b9943f3f6a/raw/aace3f7a5339b3043a6d59438d381cd692b79242/w12-3.py">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/d849d2177cb48240695370b9943f3f6a/raw/aace3f7a5339b3043a6d59438d381cd692b79242/w12-3.py">程式碼</a></p>
<p>w12-4:</p>
<p><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/e9577bf83223ba5a6b659adc00c66892/raw/92ca13357758f7307a67be548b0d0df87e05a9d9/w12-4.py">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/e9577bf83223ba5a6b659adc00c66892/raw/92ca13357758f7307a67be548b0d0df87e05a9d9/w12-4.py">程式碼</a></p>
<p>w12-5:</p>
<p><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/79b111907452e28a5c431d348e3c4171/raw/887cc9cfdeecd0550d334304d2a4b85ac0d7f64b/w12-5.py">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/79b111907452e28a5c431d348e3c4171/raw/887cc9cfdeecd0550d334304d2a4b85ac0d7f64b/w12-5.py">程式碼</a></p>
<p>w12-6:</p>
<p><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/f7c38f126f3cc49a15020337f9518d00/raw/f856c18d140737176896ac9c5a61448ed60e1f23/w12-6.py">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/f7c38f126f3cc49a15020337f9518d00/raw/f856c18d140737176896ac9c5a61448ed60e1f23/w12-6.py">程式碼</a></p>
<p>12-7:</p>
<p><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/d985b644f4a443cccc5e60e0a4af9600/raw/d1a8f67d01076f2e03b6a59eca9b88817d1819dc/w12-7.py">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/d985b644f4a443cccc5e60e0a4af9600/raw/d1a8f67d01076f2e03b6a59eca9b88817d1819dc/w12-7.py">程式碼</a></p>
<p>12-8:</p>
<p><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/5093c2d955d8f36e8e209203948cfabf/raw/ecde6afa1e0ee8e37413b09b7e50432ce3cf0702/w12-8.py">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/5093c2d955d8f36e8e209203948cfabf/raw/ecde6afa1e0ee8e37413b09b7e50432ce3cf0702/w12-8.py">程式碼</a><a href="/get_page/w12_hw/friends = [&quot;Geetha&quot;, &quot;Luca&quot;, &quot;Daisy&quot;, &quot;Juhan&quot;] dishes  = [&quot;sushi&quot;, &quot;burgers&quot;, &quot;tacos&quot;, &quot;pizza&quot;] print (&quot;My friends' names are:&quot;) print (friends) for index in range (0,4):     print (&quot;index:  &quot; + str(index))     print (&quot;friend: &quot; + friends[index])     print (&quot;Their favorite dishes are:&quot;)     print (dishes) for index in range (0,4):     print (&quot;index:  &quot; + str(index))     print (&quot;dish: &quot; + dishes[index]) for index in range (0,4):     print (&quot;My friend &quot; + friends[index] + &quot;'s favorite dish is &quot; + dishes[index])"></a></p>
<p>12-9:</p>
<p><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/8d55d36644af8dee4e1ba8fba97ea096/raw/0ec8ad6d4563b0ed9228d0b6337ca61c688596f8/w12-9.py">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/8d55d36644af8dee4e1ba8fba97ea096/raw/0ec8ad6d4563b0ed9228d0b6337ca61c688596f8/w12-9.py">程式碼</a></p>
<p>12-10:</p>
<p><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/f5206c153abd205147298ad75e078475/raw/8c35d535ababaa8ba7d44c85f17a86778429bcb1/w12-10.py">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/f5206c153abd205147298ad75e078475/raw/8c35d535ababaa8ba7d44c85f17a86778429bcb1/w12-10.py">程式碼</a></p>
<p></p>
<h3>w13</h3>
<p><a href="https://gist.githubusercontent.com/41323115/566326d3c15c48d4c8de0641cba4df7d/raw/44ec849415e8015d8c96cee83e6c2ad25870c195/w13-4.py">程式碼</a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 設定對角線顏色為藍色
ctx.strokeStyle = 'blue'  
ctx.beginPath() 
ctx.moveTo(40, 40)
ctx.lineTo(270, 270)  # 第一條對角線
ctx.stroke()
</script>
</p>
<p><a href="https://gist.githubusercontent.com/41323115/7d01ecf383a33198916076b856992791/raw/252618a127a7f6115c08a7a0beda899097d71b08/w13-1.py">程式碼</a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 設定對角線顏色為藍色
ctx.strokeStyle = 'blue'  
ctx.beginPath() 
ctx.moveTo(40, 40)
ctx.lineTo(270, 270)  # 第一條對角線
ctx.stroke()

# 繪製第一個正方形，邊框顏色為紅色
ctx.strokeStyle = 'red'   # 設定正方形邊框顏色為紅色
ctx.beginPath()
ctx.rect(40, 40, 230, 230)  # 設定正方形的位置和大小
ctx.stroke()  # 繪製邊框

# 繪製第二個正方形，邊框顏色為紅色
ctx.strokeStyle = 'red'  # 設定邊框顏色為紅色
ctx.beginPath()
ctx.rect(140, 140, 220, 220)  # 設定正方形的位置和大小
ctx.stroke()  # 繪製邊框
</script>
</p>
<p><a href="https://gist.githubusercontent.com/41323115/0949f0373ac5cd17192543dc9c4ea58d/raw/01816a31d480f8fcfc2a35da22d0f66df6d47ba6/w13-2.py">程式碼</a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 設定對角線顏色為藍色
ctx.strokeStyle = 'blue'  
ctx.beginPath() 
ctx.moveTo(40, 40)
ctx.lineTo(270, 270)  # 第一條對角線
ctx.stroke()

# 繪製第一個正方形，邊框顏色為紅色
ctx.strokeStyle = 'red'   # 設定正方形邊框顏色為紅色
ctx.beginPath()
ctx.rect(40, 40, 230, 230)  # 設定正方形的位置和大小
ctx.stroke()  # 繪製邊框

# 繪製第二個正方形，邊框顏色為紅色
ctx.strokeStyle = 'red'  # 設定邊框顏色為紅色
ctx.beginPath()
ctx.rect(140, 140, 220, 220)  # 設定正方形的位置和大小
ctx.stroke()  # 繪製邊框

# 繪製兩個正方形的外圍圓形，顏色為黑色

# 計算第一個圓的中心和半徑
center_x1 = 40 + 230 / 2  # 第一個正方形的X中心
center_y1 = 40 + 230 / 2  # 第一個正方形的Y中心
radius1 = (230 * (2 ** 0.5)) / 2  # 半徑為對角線的一半

# 設定圓的顏色為黑色
ctx.strokeStyle = 'black'  
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)  # 繪製圓
ctx.stroke()  # 描邊

# 計算第二個圓的中心和半徑
center_x2 = 140 + 220 / 2  # 第二個正方形的X中心
center_y2 = 140 + 220 / 2  # 第二個正方形的Y中心
radius2 = (220 * (2 ** 0.5)) / 2  # 半徑為對角線的一半

# 繪製第二個圓
ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)  # 繪製圓
ctx.stroke()  # 描邊
</script>
</p>
<h3>w13_hw</h3>
<p></p>
<p><a href="https://gist.githubusercontent.com/41323115/de8fa47dc8d9c739b7fc7e3d357e6505/raw/5e6d968fb175c2b2f5cfc39e55b168189003ec5c/w13_hw.py">程式碼</a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 4

# 混色的
ctx.globalCompositeOperation = "screem"

# 黑邊圓*2 (每個畫四個邊邊)
ctx.strokeStyle = 'black'

# 第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "SkyBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "Coral"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "LimeGreen"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "Beige"  
ctx.fill()
ctx.stroke()

# 第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "DarkOrchid" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "ForestGreen"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "Gold"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "Crimson" 
ctx.fill()
ctx.stroke()

# 紅方形*2 (4個三角形)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(60, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "LightYellow" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 60)
ctx.lineTo(260, 260)
ctx.fillStyle = "DarkSlateBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(360, 160)
ctx.lineTo(360, 360)
ctx.fillStyle = "LightCyan" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 360)
ctx.lineTo(360, 360)
ctx.fillStyle = "PaleGreen"  
ctx.fill()
ctx.stroke()

# 重疊的小方型
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "SteelBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(260, 160)
ctx.lineTo(260, 260)
ctx.fillStyle = "MediumPurple" 
ctx.fill()
ctx.stroke()

# 藍斜線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(360, 360)
ctx.stroke()
</script>
</p>
<p></p>
<p></p>
<h3>w14_ex</h3>
<p><span>請根據兩個圓繪圖所圍成的</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span></p>
<p><span><a href="https://mdecp2024.github.io/hw-41323115/content/Brython.html?src=https://gist.githubusercontent.com/41323115/7cb87979dd1f1f8cb95dbd2cc6c14f7c/raw/ab9ccf07e1990e44e5c4da0ed4cafb556ef9454a/w14.py">解</a></span></p>
<p><span><a href="https://gist.githubusercontent.com/41323115/7cb87979dd1f1f8cb95dbd2cc6c14f7c/raw/ab9ccf07e1990e44e5c4da0ed4cafb556ef9454a/w14.py">程式碼</a></span></p>
<p><span></span></p>
<p><br/><br/><br/><br/><br/></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import random
import math
 
# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建一個 canvas 元素，並設置其寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 將創建的 canvas 元素添加到指定的 HTML div 元素中
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div <= canvas  # 將 canvas 插入到該 div 中
     
    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口
    ctx = canvas.getContext("2d")
     
    # 返回畫布和它的 2D 繪圖上下文
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    # 使用圓的方程 (px - cx)² + (py - cy)² <= r² 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    """
    根據傳入的三個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    x3, y3, r3 是圓3的圓心坐標和半徑
    """
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)
     
    # 清空畫布，以便重新繪製
    ctx.clearRect(0, 0, canvas.width, canvas.height)
     
    # 顏色區域存儲字典，存儲不同區域的顏色
    color_dict = {}
 
    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色
        current_color = None
         
        # 遍歷當前行中的每個像素點 (px, py)
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓1內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            # 判斷該點是否在圓2內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            # 判斷該點是否在圓3內
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
             
            if in_circle1 and in_circle2 and in_circle3:
                # 如果點同時在三個圓內，則是交集區域
                if "intersection" not in color_dict:
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 如果點在圓1和圓2的交集區域
                if "circle1_circle2" not in color_dict:
                    color_dict["circle1_circle2"] = random_color_generator()
                current_color = color_dict["circle1_circle2"]
            elif in_circle2 and in_circle3:
                # 如果點在圓2和圓3的交集區域
                if "circle2_circle3" not in color_dict:
                    color_dict["circle2_circle3"] = random_color_generator()
                current_color = color_dict["circle2_circle3"]
            elif in_circle1 and in_circle3:
                # 如果點在圓1和圓3的交集區域
                if "circle1_circle3" not in color_dict:
                    color_dict["circle1_circle3"] = random_color_generator()
                current_color = color_dict["circle1_circle3"]
            elif in_circle1:
                # 如果點只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 如果點只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 如果點只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 如果點不在任何圓內，則是背景區域
                current_color = "white"  # 背景色設為白色
 
            # 設置當前像素的顏色並進行填充
            ctx.fillStyle = current_color
            # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素
 
# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 100, 100  # 圓3：圓心 (200, 100)，半徑 100
 
# 呼叫畫圓函式，並繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</script>
</p>
<p></p>
<h3>w15</h3>
<p><a href="https://organic-dollop-97j7q45vr4xwfpqx5-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323115/bcfe1dcdfbc3b04af9d2fe07a58dc879/raw/7331ded0fb9edee99eb794188fcaad5225cb8b08/w15">從 1 累加到 100</a></p>
<p><a href="https://organic-dollop-97j7q45vr4xwfpqx5-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323115/155339a1ea71538fad73b4a38be12f96/raw/49c875f011edfef8c1c60a61e2fc980ae8cabe94/w15-2"> addto(1, 100)</a></p>
<p><a href="https://organic-dollop-97j7q45vr4xwfpqx5-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323115/b8a7be4a3e5db4f78a6969edb0231a53/raw/e85a40cc8d0646d704ac5a347013fdc36fba945d/w15-3"> add_only_even(1, 100)</a></p>
<p><a href="https://gist.githubusercontent.com/41323115/b8a7be4a3e5db4f78a6969edb0231a53/raw/e85a40cc8d0646d704ac5a347013fdc36fba945d/w15-3"></a><a href="https://organic-dollop-97j7q45vr4xwfpqx5-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323115/1af1e5187bb26aa110bed9cbe6cfeff3/raw/d05c53000cf25e25652d633aad6e212460090d06/w15-4">add_avoid_8(1, 100)</a></p>
<p>2490</p>
<p>心得:</p>
<p>這段程式設計讓我深入理解了條件篩選與累加的應用。透過避開包含「8」的數字和基數（奇數），我學會了如何利用 Python 的條件判斷來過濾數字，並進行有效的累加。這個練習也強化了我對 <code>for</code> 迴圈和 <code>sum()</code> 函式的使用，讓我更加熟悉在範圍內篩選並計算總和的過程。</p>
<p></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>